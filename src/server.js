// 1. Carrega as vari√°veis de ambiente do arquivo .env
require('dotenv').config();

// 2. Importa as depend√™ncias necess√°rias
const express = require('express');
const db = require('./models');
const errorHandlerMiddleware = require('./middleware/ErrorHandlerMiddleware');

// 3. Importa os arquivos de rota
const pessoaRoutes = require('./routes/pessoaRoutes.js');
const authRoutes = require('./routes/authRoutes.js');
const animalRoutes = require('./routes/animalRoutes.js');

// 4. Inicializa a aplica√ß√£o Express
const app = express();

// 5. Configura o middleware para entender JSON
app.use(express.json());

// 6. Define as rotas principais da API
app.use('/api/v1/pessoas', pessoaRoutes);
app.use('/api/v1/auth', authRoutes);
app.use('/api/v1/animais', animalRoutes);

// 7. REGISTRA O MIDDLEWARE DE ERRO
app.use(errorHandlerMiddleware);

// 8. Define a porta do servidor
const PORT = process.env.PORT || 3333;

// 9. Inicia o servidor E GUARDA A REFER√äNCIA DELE
let server;
db.sequelize.authenticate()
  .then(() => {
    console.log('‚úÖ Conex√£o com o banco de dados estabelecida com sucesso!');
    server = app.listen(PORT, () => { // <--- Guarda a refer√™ncia aqui
      console.log(`üöÄ Servidor rodando na porta ${PORT}`);
    });
  })
  .catch(err => {
    console.error('‚ùå N√£o foi poss√≠vel conectar ao banco de dados:', err);
    process.exit(1);
  });

// ‚Üì‚Üì‚Üì ADICIONE ESTE BLOCO NO FINAL DO ARQUIVO ‚Üì‚Üì‚Üì
// 10. L√≥gica de Graceful Shutdown
const gracefulShutdown = () => {
  console.log('üîå Recebido sinal para desligar. Fechando conex√µes...');
  server.close(() => {
    console.log('‚úÖ Servidor HTTP fechado.');
    db.sequelize.close().then(() => {
      console.log('‚úÖ Conex√£o com o banco de dados fechada.');
      process.exit(0);
    });
  });
};

// Ouve por sinais de t√©rmino comuns
process.on('SIGTERM', gracefulShutdown); // Sinal de t√©rmino padr√£o
process.on('SIGINT', gracefulShutdown);  // Sinal de interrup√ß√£o (Ctrl+C)