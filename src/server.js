// 1. CONFIGURA√á√ÉO INICIAL
// Carrega as vari√°veis de ambiente do arquivo .env o mais cedo poss√≠vel
require('dotenv').config();

// 2. IMPORTA√á√ïES PRINCIPAIS
const express = require('express');
const db = require('./models'); // O 'index.js' dos models, que inicializa o Sequelize

// 3. IMPORTA√á√ÉO DOS M√ìDULOS DE ROTAS
// Rota dedicada para autentica√ß√£o (login, logout, etc.)
const authRoutes = require('./routes/authRoutes.js');
// Nosso novo Roteador Universal para todas as opera√ß√µes de CRUD
const crudRoutes = require('./routes/crudRoutes.js');

// 4. IMPORTA√á√ÉO DOS MIDDLEWARES
const ErrorHandlerMiddleware = require('./middleware/ErrorHandlerMiddleware');

// 5. INICIALIZA√á√ÉO DA APLICA√á√ÉO EXPRESS
const app = express();

// 6. MIDDLEWARES GLOBAIS DA APLICA√á√ÉO
// Permite que a aplica√ß√£o entenda requisi√ß√µes com corpo no formato JSON
app.use(express.json());

// 7. REGISTRO DAS ROTAS
// Todas as rotas de autentica√ß√£o estar√£o sob o prefixo /api/v1/auth
app.use('/api/v1/auth', authRoutes);
// O roteador universal cuidar√° de todas as outras entidades sob /api/v1
// Ex: /api/v1/pessoas, /api/v1/animais, etc.
app.use('/api/v1', crudRoutes);

// 8. REGISTRO DO MIDDLEWARE DE TRATAMENTO DE ERROS
// IMPORTANTE: Deve ser o √∫ltimo 'app.use()' a ser registrado
app.use(ErrorHandlerMiddleware);

// 9. DEFINI√á√ÉO DA PORTA E INICIALIZA√á√ÉO DO SERVIDOR
const PORT = process.env.PORT || 3333;

let server;
// Verifica a conex√£o com o banco de dados ANTES de iniciar o servidor web
db.sequelize.authenticate()
  .then(() => {
    console.log('‚úÖ Conex√£o com o banco de dados estabelecida com sucesso!');
    // Inicia o servidor e guarda a refer√™ncia para o graceful shutdown
    server = app.listen(PORT, () => {
      console.log(`üöÄ Servidor rodando na porta ${PORT}`);
    });
  })
  .catch(err => {
    console.error('‚ùå N√£o foi poss√≠vel conectar ao banco de dados:', err);
    process.exit(1); // Encerra a aplica√ß√£o se n√£o conseguir conectar ao DB
  });

// 10. L√ìGICA DE "GRACEFUL SHUTDOWN"
// Garante que as conex√µes sejam fechadas corretamente quando o servidor √© desligado
const gracefulShutdown = () => {
  console.log('üîå Recebido sinal para desligar. Fechando conex√µes...');
  server.close(() => {
    console.log('‚úÖ Servidor HTTP fechado.');
    db.sequelize.close().then(() => {
      console.log('‚úÖ Conex√£o com o banco de dados fechada.');
      process.exit(0);
    });
  });
};

// Ouve por sinais de t√©rmino do processo (ex: Ctrl+C no terminal)
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);